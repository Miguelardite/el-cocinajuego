//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem_Actions"",
    ""maps"": [
        {
            ""name"": ""Cameras"",
            ""id"": ""9a26b7d6-54b8-4f06-8b9c-a30c33a2cf49"",
            ""actions"": [
                {
                    ""name"": ""MirarAbajo"",
                    ""type"": ""Button"",
                    ""id"": ""61af31f6-15de-4ccd-8056-cb2b607b6567"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MirarArriba"",
                    ""type"": ""Button"",
                    ""id"": ""bee3a4d2-6d73-4164-ae8d-8e0b38f7459d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GirarDerecha"",
                    ""type"": ""Button"",
                    ""id"": ""86b760e2-b16a-4ec5-af00-fdc4c7f09d15"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GirarIzquierda"",
                    ""type"": ""Button"",
                    ""id"": ""5c161130-967a-4403-891e-088c78092ad4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""09a8a3d3-96e9-4a0f-82b1-3bfd8f2743d7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MirarAbajo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39d0cd94-9426-4ab1-a176-47fd50d2faf4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MirarArriba"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b8051be-570f-4229-91c0-7b20ff1622b6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GirarDerecha"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d820e33-495f-4f55-a8ce-0ad2702caf10"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GirarIzquierda"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""272f6d14-89ba-496f-b7ff-215263d3219f"",
            ""actions"": [
                {
                    ""name"": ""ToggleMovil"",
                    ""type"": ""Button"",
                    ""id"": ""33b7a2ff-39ef-41eb-94a3-3a7a3ef1b8df"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""62428e77-e4b3-4473-8e12-0044828b7394"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleMovil"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Cameras
        m_Cameras = asset.FindActionMap("Cameras", throwIfNotFound: true);
        m_Cameras_MirarAbajo = m_Cameras.FindAction("MirarAbajo", throwIfNotFound: true);
        m_Cameras_MirarArriba = m_Cameras.FindAction("MirarArriba", throwIfNotFound: true);
        m_Cameras_GirarDerecha = m_Cameras.FindAction("GirarDerecha", throwIfNotFound: true);
        m_Cameras_GirarIzquierda = m_Cameras.FindAction("GirarIzquierda", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_ToggleMovil = m_UI.FindAction("ToggleMovil", throwIfNotFound: true);
    }

    ~@InputSystem_Actions()
    {
        UnityEngine.Debug.Assert(!m_Cameras.enabled, "This will cause a leak and performance issues, InputSystem_Actions.Cameras.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, InputSystem_Actions.UI.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cameras
    private readonly InputActionMap m_Cameras;
    private List<ICamerasActions> m_CamerasActionsCallbackInterfaces = new List<ICamerasActions>();
    private readonly InputAction m_Cameras_MirarAbajo;
    private readonly InputAction m_Cameras_MirarArriba;
    private readonly InputAction m_Cameras_GirarDerecha;
    private readonly InputAction m_Cameras_GirarIzquierda;
    public struct CamerasActions
    {
        private @InputSystem_Actions m_Wrapper;
        public CamerasActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MirarAbajo => m_Wrapper.m_Cameras_MirarAbajo;
        public InputAction @MirarArriba => m_Wrapper.m_Cameras_MirarArriba;
        public InputAction @GirarDerecha => m_Wrapper.m_Cameras_GirarDerecha;
        public InputAction @GirarIzquierda => m_Wrapper.m_Cameras_GirarIzquierda;
        public InputActionMap Get() { return m_Wrapper.m_Cameras; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CamerasActions set) { return set.Get(); }
        public void AddCallbacks(ICamerasActions instance)
        {
            if (instance == null || m_Wrapper.m_CamerasActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CamerasActionsCallbackInterfaces.Add(instance);
            @MirarAbajo.started += instance.OnMirarAbajo;
            @MirarAbajo.performed += instance.OnMirarAbajo;
            @MirarAbajo.canceled += instance.OnMirarAbajo;
            @MirarArriba.started += instance.OnMirarArriba;
            @MirarArriba.performed += instance.OnMirarArriba;
            @MirarArriba.canceled += instance.OnMirarArriba;
            @GirarDerecha.started += instance.OnGirarDerecha;
            @GirarDerecha.performed += instance.OnGirarDerecha;
            @GirarDerecha.canceled += instance.OnGirarDerecha;
            @GirarIzquierda.started += instance.OnGirarIzquierda;
            @GirarIzquierda.performed += instance.OnGirarIzquierda;
            @GirarIzquierda.canceled += instance.OnGirarIzquierda;
        }

        private void UnregisterCallbacks(ICamerasActions instance)
        {
            @MirarAbajo.started -= instance.OnMirarAbajo;
            @MirarAbajo.performed -= instance.OnMirarAbajo;
            @MirarAbajo.canceled -= instance.OnMirarAbajo;
            @MirarArriba.started -= instance.OnMirarArriba;
            @MirarArriba.performed -= instance.OnMirarArriba;
            @MirarArriba.canceled -= instance.OnMirarArriba;
            @GirarDerecha.started -= instance.OnGirarDerecha;
            @GirarDerecha.performed -= instance.OnGirarDerecha;
            @GirarDerecha.canceled -= instance.OnGirarDerecha;
            @GirarIzquierda.started -= instance.OnGirarIzquierda;
            @GirarIzquierda.performed -= instance.OnGirarIzquierda;
            @GirarIzquierda.canceled -= instance.OnGirarIzquierda;
        }

        public void RemoveCallbacks(ICamerasActions instance)
        {
            if (m_Wrapper.m_CamerasActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICamerasActions instance)
        {
            foreach (var item in m_Wrapper.m_CamerasActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CamerasActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CamerasActions @Cameras => new CamerasActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_ToggleMovil;
    public struct UIActions
    {
        private @InputSystem_Actions m_Wrapper;
        public UIActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleMovil => m_Wrapper.m_UI_ToggleMovil;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @ToggleMovil.started += instance.OnToggleMovil;
            @ToggleMovil.performed += instance.OnToggleMovil;
            @ToggleMovil.canceled += instance.OnToggleMovil;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @ToggleMovil.started -= instance.OnToggleMovil;
            @ToggleMovil.performed -= instance.OnToggleMovil;
            @ToggleMovil.canceled -= instance.OnToggleMovil;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface ICamerasActions
    {
        void OnMirarAbajo(InputAction.CallbackContext context);
        void OnMirarArriba(InputAction.CallbackContext context);
        void OnGirarDerecha(InputAction.CallbackContext context);
        void OnGirarIzquierda(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnToggleMovil(InputAction.CallbackContext context);
    }
}
